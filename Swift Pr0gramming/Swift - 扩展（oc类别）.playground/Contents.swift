//: Playground - noun: a place where people can play

import UIKit

/*
/************************** 扩展  *************=/
**************/
*/
//扩展就是向一个已有的类、结构体、枚举类型或者协议类型添加新功能（functionality）这包括在没有权限获取原始源代码的情况下扩展类型的能力（即逆向建模）
//扩展和 Objective-C 中的分类（categories）类似。（不过与 Objective-C 不同的是，Swift 的扩展没有名字。


//可以添加计算型属性和计算型静态属性
//定义实例方法和类型方法
//提供新的构造器
//定义下标
//定义和 使用新的 嵌套类型
//使一个类型复合某个协议

//，你甚至可以对一个协议(Protocol)进行扩展，提供协议需要的实现，或者添加额外的功能能够对合适的类型带来额外的好处
//扩展可以对一个类型添加新的功能，但是不能重写已有的功能。

/************************** 扩展语法  *************/
//extension SomeType {
//    // 加到SomeType的新功能写到这里
//}

//一个扩展可以扩展一个已有类型，使其能够适配一个或多个协议（protocol）。当这种情况发生时，协议的名字应该完全按照类或结构体的名字的方式进行书写：
/*
extension SomeType: SomeProtocol, AnotherProctocol {
    // 协议实现写到这里
}
*/

//如果你定义了一个扩展向一个已有类型添加新功能，那么这个新功能对该类型的所有已有实例中都是可用的，即使它们是在你的这个扩展的前面定义的。


/************************** 计算型属性 *************/

